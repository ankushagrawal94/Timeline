//
//  VTimeline.m
//  TreeHacks
//
//  Created by Ankush Agrawal on 2/21/15.
//  Copyright (c) 2015 TreeHacks. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "VTimeline.h"


@implementation VTimeline

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawRight_15WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX - 6), (timeY - 10), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(63, (textY + 5), 116, 18);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 8), (lineY - 4), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle2Path fill];


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX + 35), (imageY + 46));

    CGRect ovalRect = CGRectMake(-58, -58, (imageSize + 17), (imageSize + 17));
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(ovalRect) + 0.5), floor(CGRectGetMinY(ovalRect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLeft_15WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX + 143), (timeY - 10), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 35), (lineY - 4), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle2Path fill];


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX - 18), (imageY + 47));

    CGRect ovalRect = CGRectMake(-58, -58, (imageSize + 17), (imageSize + 17));
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(ovalRect) + 0.5), floor(CGRectGetMinY(ovalRect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(10, (textY + 6), 116, 18);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawRight_1WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX - 6), (timeY - 27), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(71, (textY - 20), 116, 18);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (lineX - 6), (lineY - 19));

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(14, -2, (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle2Path fill];

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX + 52), (imageY + 38));

    CGRect ovalRect = CGRectMake(-58, -58, imageSize, imageSize);
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(ovalRect) + 0.5), floor(CGRectGetMinY(ovalRect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLeft_1WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX + 143), (timeY - 27), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(0, (textY - 20), 116, 18);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 35), (lineY - 21), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle4Path fill];


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX - 19), (imageY + 38));

    CGRect oval2Rect = CGRectMake(-58, -58, imageSize, imageSize);
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: oval2Rect];
    CGContextSaveGState(context);
    [oval2Path addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(oval2Rect) + 0.5), floor(CGRectGetMinY(oval2Rect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color setStroke];
    oval2Path.lineWidth = 1.5;
    [oval2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLeft_45WithImageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX + 143), (timeY - 18), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 35), (lineY - 13), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle2Path fill];


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX - 9), (imageY + 50));

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-58, -58, (imageSize - 9), (imageSize - 9))];
    [UIColor.blueColor setFill];
    [ovalPath fill];
    [color3 setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(6, (textY - 10), 116, 18);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawRight_45WithImageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle 3 Drawing
    CGRect rectangle3Rect = CGRectMake((timeX - 6), (timeY - 18), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: rectangle3Rect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectangle3Path fill];
    NSMutableParagraphStyle* rectangle3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangle3Style.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangle3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangle3Style};

    CGFloat rectangle3TextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangle3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle3FontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangle3Rect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangle3Rect), CGRectGetMinY(rectangle3Rect) + (CGRectGetHeight(rectangle3Rect) - rectangle3TextHeight) / 2, CGRectGetWidth(rectangle3Rect), rectangle3TextHeight) withAttributes: rectangle3FontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 8), (lineY - 13), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle4Path fill];


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX + 51), (imageY + 50));

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-58, -58, (imageSize - 9), (imageSize - 9))];
    [UIColor.blueColor setFill];
    [oval2Path fill];
    [color3 setStroke];
    oval2Path.lineWidth = 1.5;
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(66, (textY - 10), 116, 18);
    NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    text2Style.alignment = NSTextAlignmentCenter;

    NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text2Style};

    CGFloat text2TextHeight = [artistName boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, text2Rect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawRight_30WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Text Drawing
    CGRect textRect = CGRectMake(65, (textY - 25), 110, 16);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX - 6), (timeY - 29), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 8), (lineY - 23), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle4Path fill];


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX + 43.3634991119), (imageY + 48.310773501));
    CGContextRotateCTM(context, -15.46 * M_PI / 180);

    CGRect oval2Rect = CGRectMake(-44.07, -58, (imageSize - 22.9299726816), (imageSize - 23.8227746852));
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: oval2Rect];
    CGContextSaveGState(context);
    [oval2Path addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(oval2Rect) + 0.5), floor(CGRectGetMinY(oval2Rect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    oval2Path.lineWidth = 1.5;
    [oval2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLeft_30WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Text Drawing
    CGRect textRect = CGRectMake(0, (textY - 25), 110, 16);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    CGRect rectangle2Rect = CGRectMake((timeX + 143), (timeY - 29), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: rectangle2Rect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectangle2Path fill];
    NSMutableParagraphStyle* rectangle2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangle2Style.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangle2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangle2Style};

    CGFloat rectangle2TextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangle2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle2FontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangle2Rect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangle2Rect), CGRectGetMinY(rectangle2Rect) + (CGRectGetHeight(rectangle2Rect) - rectangle2TextHeight) / 2, CGRectGetWidth(rectangle2Rect), rectangle2TextHeight) withAttributes: rectangle2FontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 35), (lineY - 23), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle4Path fill];


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX - 18.6365008881), (imageY + 48.311));
    CGContextRotateCTM(context, -15.46 * M_PI / 180);

    CGRect oval2Rect = CGRectMake(-44.07, -58, (imageSize - 22.9299726816), (imageSize - 23.8227746852));
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: oval2Rect];
    CGContextSaveGState(context);
    [oval2Path addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(oval2Rect) + 0.5), floor(CGRectGetMinY(oval2Rect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    oval2Path.lineWidth = 1.5;
    [oval2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLeft_10WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Rectangle 2 Drawing
    CGRect rectangle2Rect = CGRectMake((timeX + 162), (timeY - 27), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: rectangle2Rect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectangle2Path fill];
    NSMutableParagraphStyle* rectangle2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangle2Style.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangle2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangle2Style};

    CGFloat rectangle2TextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangle2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle2FontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangle2Rect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangle2Rect), CGRectGetMinY(rectangle2Rect) + (CGRectGetHeight(rectangle2Rect) - rectangle2TextHeight) / 2, CGRectGetWidth(rectangle2Rect), rectangle2TextHeight) withAttributes: rectangle2FontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 54), (lineY - 21), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle4Path fill];


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX - 14.7639641749), (imageY + 60.311));

    CGRect ovalRect = CGRectMake(-50.54, -57.57, (imageSize - 43.1), (imageSize - 44.1858354433));
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(ovalRect) + 0.5), floor(CGRectGetMinY(ovalRect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Text Drawing
    CGRect textRect = CGRectMake(2, (textY - 33), 100, 17);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [artistName boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

+ (void)drawRight_10WithArtistImage: (UIImage*)artistImage imageY: (CGFloat)imageY imageSize: (CGFloat)imageSize timeText: (NSString*)timeText artistName: (NSString*)artistName
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Variable Declarations
    CGFloat timeHeight = 11;
    CGFloat timeWidth = 24;
    CGFloat timeX = 6;
    CGFloat lineX = timeX + timeWidth;
    CGFloat imageX = 77;
    CGFloat lineWidth = imageX - lineX;
    CGFloat timeY = imageSize / 2.0 - timeHeight / 2.0 + imageY;
    CGFloat lineY = imageSize / 2.0 + imageY;
    CGFloat textY = imageY + imageSize;

    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(104, (textY - 33), 100, 17);
    NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    text2Style.alignment = NSTextAlignmentCenter;

    NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text2Style};

    CGFloat text2TextHeight = [artistName boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, text2Rect);
    [artistName drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake((timeX - 5), (timeY - 27), (timeWidth + 14), (timeHeight + 14.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 12.75];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [timeText boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [timeText drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake((lineX + 8), (lineY - 21), (lineWidth + 37), 2)];
    [color2 setFill];
    [rectangle3Path fill];


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (imageX + 95.2360358251), (imageY + 59.311));

    CGRect ovalRect = CGRectMake(-50.54, -57.57, (imageSize - 43.1), (imageSize - 44.1858354433));
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [artistImage drawInRect: CGRectMake(floor(CGRectGetMinX(ovalRect) + 0.5), floor(CGRectGetMinY(ovalRect) + 0.5), artistImage.size.width, artistImage.size.height)];
    CGContextRestoreGState(context);
    [color3 setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

@end
